<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://xpropp.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jul 2020 11:01:45 +0800</lastBuildDate>
    
	<atom:link href="https://xpropp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>归并排序</title>
      <link>https://xpropp.github.io/post/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 21 Jul 2020 11:01:45 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>归并排序 归并排序是采用分治之的一个非常典型的应用，归并排序的思想就是先递归分解数组，再合并数组。 将数组分解最小之后，然后合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。 def merge_sort(alist): &amp;#34;&amp;#34;&amp;#34;归并排序&amp;#34;&amp;#34;&amp;#34; n = len(alist) if n &amp;lt;= 1: return alist mid = n // 2 # left 采用归并排序后形成的有序的新的列表 left_li = merge_sort(alist[:mid]) # right 采用归并排序后形成的有序的新的列表 right_li = merge_sort(alist[mid:]) # 将两个有序的子序列表合并为一个新的整体 left_pointer, right_pointer = 0, 0 result = [] while left_pointer &amp;lt; len(left_li) and right_pointer &amp;lt; len(right_li): if left_li[left_pointer]&amp;lt; right_li[right_pointer]: result.append(left_li[left_pointer]) left_pointer += 1 else: result.append(right_li[right_pointer]) right_pointer += 1 result += left_li[left_pointer:] result += right_li[right_pointer:] return result if __name__ == &amp;#39;__main__&amp;#39;: li = [54, 26, 93, 17, 31, 44, 55, 20, 88, 54, 77, 90, 2, 3, 1] print(li) sorted_li = merge_sort(li) print(sorted_li) 运行结果如下： [54, 26, 93, 17, 31, 44, 55, 20, 88, 54, 77, 90, 2, 3, 1] [1, 2, 3, 17, 20, 26, 31, 44, 54, 54, 55, 77, 88, 90, 93] </description>
    </item>
    
    <item>
      <title>快速排序</title>
      <link>https://xpropp.github.io/post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 21 Jul 2020 09:30:46 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
      <description>快速排序： 快速排序（Quicksort），又称划分交换排序（purtiton-exchange sort）,通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都以另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 步骤为：
 从数列中挑出一个元素，称为“基准”（pirot）。 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面，（相同的数可以放在任意一边）。在这个区分结果之后，改基准就处于数列的中间位置，这个称为分区（partition）操作。 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排列。  递归的最底部情形，是数列的大小是0或者1，也就是永远都已经被排序好了，虽然一直递归下去，但是这个算法总会结束，因为在每每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。 # coding: utf-8 def quick_sort(alist, frist, last): &amp;#39;&amp;#39;&amp;#39;快速排序&amp;#39;&amp;#39;&amp;#39; if frist &amp;gt;= last: return mid_value = alist[frist] low = frist high = last while low &amp;lt; high: # 左移 while low &amp;lt; high and alist[high] &amp;gt;= mid_value: high -= 1 alist[low] = alist[high] # 右移 while low &amp;lt; high and alist[low] &amp;lt; mid_value: low += 1 alist[high] = alist[low] # 从循环退出是 low = high alist[low] = mid_value # 对low左边的列表执行快速排序 quick_sort(alist, frist, low - 1) # 对low右边的列表执行快速排序 quick_sort(alist, low + 1, last) if __name__ == &amp;#39;__main__&amp;#39;: li = [54, 26, 93, 17, 77, 31, 44, 55, 20] print(li) quick_sort(li, 0, len(li) - 1) print(li) </description>
    </item>
    
    <item>
      <title>矩形覆盖</title>
      <link>https://xpropp.github.io/post/%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/</link>
      <pubDate>Tue, 21 Jul 2020 09:22:53 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/</guid>
      <description>本题知识点： 递归
题目描述
我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
# -*- coding:utf-8 -*- class Solution: def rectCover(self, number): # write code here if number == 0: return 0 if number ==1: return 1 if number ==2: return 2 a =1 b=2 for i in range(3,number + 1): b = a + b a = b - a return b </description>
    </item>
    
    <item>
      <title>数组中只出现一次的数字</title>
      <link>https://xpropp.github.io/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 19 Jun 2020 09:35:54 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>本题知识点： 数组
题目描述:
一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。
# -*- coding:utf-8 -*- class Solution: # 返回[a,b] 其中ab是出现一次的两个数字 def FindNumsAppearOnce(self, array): # write code here # 如果两个数相同，那么这两个树的异或操作就等于0 if len(array) &amp;lt; 2: return None twoNumXor = None for num in array: if twoNumXor == None: twoNumXor = num else: twoNumXor = twoNumXor ^ num count = 0 while twoNumXor % 2 == 0: twoNumXor = twoNumXor &amp;gt;&amp;gt; 1 count += 1 mask = 1 &amp;lt;&amp;lt; count fristNum = None secondNum = None for num in array: if mask &amp;amp; num == 0: if fristNum == None: fristNum = num else: fristNum = fristNum ^ num else: if secondNum == None: secondNum = num else: secondNum = secondNum ^ num return fristNum,secondNum </description>
    </item>
    
    <item>
      <title>数据结构与算法  01</title>
      <link>https://xpropp.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01/</link>
      <pubDate>Thu, 18 Jun 2020 16:55:39 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01/</guid>
      <description>数据结构与算法-Day01 算法概述   算法 - 前序
# 全场动作必须跟我整齐划一，来，我们一起来做一道题 若n1+n2+n3=1000,且n1^2+n2^2=n3^2(n1,n2,n3为自然数),求出所有n1、n2、n3可能的组合 # 思路1: n1 = 0 n2 = 0 n3 = 0 判断n1+n2+n3是否等于1000,之后变n3=1,n3=2,n3=3,... 然后再变n2 那如果变为 n1+n2+n3=2000 了呢？ # 思路1代码实现 import time start_time = time.time() for n1 in range(0,1001): for n2 in range(0,1001): for n3 in range(0,1001): if n1 + n2 + n3 == 1000 and n1**2 + n2**2 == n3**2: print(&amp;#39;[%d,%d,%d]&amp;#39; % (n1,n2,n3)) end_time = time.time() print(&amp;#39;执行时间:%.2f&amp;#39; % (end_time-start_time))   算法概念</description>
    </item>
    
    <item>
      <title>斐波那契数列</title>
      <link>https://xpropp.github.io/post/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</link>
      <pubDate>Thu, 18 Jun 2020 16:49:34 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</guid>
      <description>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。
# -*- coding:utf-8 -*- class Solution: def Fibonacci(self, n): # write code here if n == 0: return 0 if n ==1: return 1 a =1 b=0 ret = 0 for i in range(0,n-1): ret = a + b b = a a = ret return ret </description>
    </item>
    
    <item>
      <title>变态青蛙跳</title>
      <link>https://xpropp.github.io/post/%E5%8F%98%E6%80%81%E9%9D%92%E8%9B%99%E8%B7%B3/</link>
      <pubDate>Tue, 16 Jun 2020 17:28:29 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E5%8F%98%E6%80%81%E9%9D%92%E8%9B%99%E8%B7%B3/</guid>
      <description>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
# -*- coding:utf-8 -*- class Solution: def jumpFloorII(self, number): # write code here # f(n) = f(n-1)+f(n-2)+...+f(1) # f(n-1) = f(n-2)+...+f(1) # f(n) = 2f(n-1) # f(1) = 1 n=1 if number == 1: return 1 ret = 1 a = 1 for i in range(2,number+1): ret = 2 * a a=ret return ret #return pow(2,number-1) </description>
    </item>
    
    <item>
      <title>丑数</title>
      <link>https://xpropp.github.io/post/%E4%B8%91%E6%95%B0/</link>
      <pubDate>Tue, 16 Jun 2020 17:21:42 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E4%B8%91%E6%95%B0/</guid>
      <description>本题知识点： 穷举
题目描述:
把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。
# -*- coding:utf-8 -*- class Solution: def GetUglyNumber_Solution(self, index): # write code here if index &amp;lt; 1: return 0 uglyList = [1] twoPointer = 0 therePointer = 0 fivePointer = 0 count = 1 while count != index: minValue = min(2*uglyList[twoPointer],3*uglyList[therePointer],5*uglyList[fivePointer]) uglyList.append(minValue) count += 1 if minValue == 2*uglyList[twoPointer]: twoPointer +=1 if minValue == 3*uglyList[therePointer]: therePointer +=1 if minValue == 5*uglyList[fivePointer]: fivePointer +=1 return uglyList[count-1] </description>
    </item>
    
    <item>
      <title>对称的二叉树</title>
      <link>https://xpropp.github.io/post/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 16 Jun 2020 15:41:53 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>本题知识点： 树
题目描述: 请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。
# -*- coding:utf-8 -*- # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isSymmetrical(self, pRoot): # write code here def isMirror(left,right): if left == None and right == None: return True elif left == None or right == None: return False if left.val != right.val: return False ret1 = isMirror(left.left,right.right) ret2 = isMirror(left.right,right.left) return ret1 and ret2 if pRoot == None: return True return isMirror(pRoot.</description>
    </item>
    
    <item>
      <title>token - 令牌</title>
      <link>https://xpropp.github.io/post/blog/</link>
      <pubDate>Tue, 16 Jun 2020 14:51:48 +0800</pubDate>
      
      <guid>https://xpropp.github.io/post/blog/</guid>
      <description>token - 令牌
JWT - json-web-token
1，三大组成 1，header
格式为字典-元数据格式如下
{&amp;lsquo;alg&amp;rsquo;:&amp;lsquo;HS256&amp;rsquo;, &amp;lsquo;typ&amp;rsquo;:&amp;lsquo;JWT&amp;rsquo;} #alg代表要使用的 算法 #typ表明该token的类别 - 此处必须为 大写的 JWT 该部分数据需要转成json串并用base64 加密
2，payload
格式为字典-此部分分为公有声明和私有声明
公共声明：JWT提供了内置关键字用于描述常见的问题
此部分均为可选项，用户根据自己需求 按需添加key，常见公共声明如下：
{&amp;lsquo;exp&amp;rsquo;:xxx, # Expiration Time 此token的过期时间的时间戳 &amp;lsquo;iss&amp;rsquo;:xxx，# (Issuer) Claim 指明此token的签发者 &amp;lsquo;aud&amp;rsquo;:xxx, #(Audience) Claim 指明此token的 &amp;lsquo;iat&amp;rsquo;:xxx, # (Issued At) Claim 指明此创建时间的时间戳 &amp;lsquo;aud&amp;rsquo;:xxx, # (Audience) Claim	指明此token签发面向群体 } 私有声明：用户可根据自己业务需求，添加自定义的key，例如如下：
{&amp;lsquo;username&amp;rsquo;: &amp;lsquo;sunwukong&amp;rsquo;} 公共声明和私有声明均在同一个字典中；转成json串并用base64加密
3，signature 签名
签名规则如下：
根据header中的alg确定 具体算法，以下用 HS256为例
HS256(自定义的key , base64后的header + &amp;lsquo;.&amp;rsquo; + base64后的payload)
解释：用自定义的key, 对base64后的header + &amp;lsquo;.</description>
    </item>
    
  </channel>
</rss>